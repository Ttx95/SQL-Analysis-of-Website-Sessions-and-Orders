
/*1. Gsearch appears to be a primary contributor to our business. I'll extract monthly
 data on Gsearch sessions and orders.

 */


SELECT
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id) / COUNT(DISTINCT website_sessions.website_session_id) AS conv_rate -- Conversion rate
FROM website_sessions
LEFT JOIN orders ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
AND website_sessions.utm_source = 'gsearch'
GROUP BY 1,2;

/*2. I'm keen to understand the differences between our nonbrand and brand campaigns. 
Are our brand campaigns making headway? If they are, it would present a compelling story.
*/

SELECT
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign="nonbrand" THEN website_sessions.website_session_id ELSE NULL END) AS nonbrand_sessions,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign="nonbrand" THEN orders.order_id ELSE NULL END) AS nonbrand_orders,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign="brand" THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign="brand" THEN orders.order_id ELSE NULL END) AS brand_orders
FROM website_sessions
LEFT JOIN orders
    ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
    AND website_sessions.utm_source = 'gsearch'
GROUP BY 1,2;

/*3. While i'm on Gsearch,I'm diveing into nonbrand, 
and pulling monthly sessions and orders split by device type.*/

SELECT
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN website_sessions.website_session_id ELSE NULL END) AS desktop_sessions,
    COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN orders.order_id ELSE NULL END) AS desktop_orders,
    COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN website_sessions.website_session_id ELSE NULL END) AS mobile_sessions,
    COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN orders.order_id ELSE NULL END) AS mobile_orders,
    COUNT(DISTINCT CASE WHEN device_type = 'desktop' THEN orders.order_id ELSE NULL END)/
    COUNT(DISTINCT CASE WHEN device_type = 'mobile' THEN orders.order_id ELSE NULL END) AS Desktop_vs_Mobile_order_rasio
FROM website_sessions
LEFT JOIN orders ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
AND website_sessions.utm_source = 'gsearch'
AND website_sessions.utm_campaign = 'nonbrand'
GROUP BY 1,2;


/*4. I'm worried that one of our more pessimistic board members may be concerned about the large of traffic from Gsearch.

I am pull monthly trends for Gsearch, alongside monthly trends for each of our other channels.
*/

-- first, finding the various utm source and referers to see the traffic we're getting

SELECT DISTINCT 
    utm_source,
    utm_campaign,
    http_referer
FROM website_sessions
WHERE website_sessions.created_at < '2012-11-27';



SELECT
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT CASE WHEN utm_source = 'gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_paid_sessions,
    COUNT(DISTINCT CASE WHEN utm_source = 'bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_paid_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_search_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_type_in_sessions
FROM website_sessions
LEFT JOIN orders ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
GROUP BY 1,2;



/*5. In this SQL query, we're aiming to highlight the progress of our website's performance over the first 8 months leading up to the date '2012-11-27'.
 The main objective is to calculate the conversion rate from sessions to orders on a month-by-month basis. This conversion rate will provide insights
 into how efficiently our website visitors are turning into customers each month."
*/

SELECT
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    (COUNT(DISTINCT orders.order_id) / COUNT(DISTINCT website_sessions.website_session_id)) AS conversion_rate
FROM website_sessions
LEFT JOIN orders ON orders.website_session_id = website_sessions.website_session_id
WHERE website_sessions.created_at < '2012-11-27'
GROUP BY 1,2;

/* 6. For the gsearch lander test estimateing the revenue that test earned us. 
Increase in CVR from the test (Jun 19 - Jul 28), and use nonbrand sessions and revenue since then to calculate incremental value  */
 
 
 -- Find the first pageview ID for sessions that landed on '/lander-1' as part of the gsearch test.
 
 SELECT 
     MIN(website_pageview_id) AS first_test_pv
FROM website_pageviews
WHERE pageview_url = '/lander-1';  -- 23504


-- We're creating a temporary table to store this data for further use.

CREATE TEMPORARY TABLE first_test_pageviews
SELECT
    website_pageviews.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS min_pageview_id
FROM website_pageviews
INNER JOIN website_sessions 
    ON website_sessions.website_session_id = website_pageviews.website_session_id
    AND website_sessions.created_at < '2012-07-28' -- date
    AND website_pageviews.website_pageview_id >= 23504 -- first pageview
    AND website_sessions.utm_source = 'gsearch'
    AND website_sessions.utm_campaign = 'nonbrand'
GROUP BY 
    website_pageviews.website_session_id;

-- next, we'll bring in the landing page to each session, like last time, but restricting to home or lander-1 this time

CREATE TEMPORARY TABLE nonbrand_test_sessions_w_landing_pages AS
SELECT 
    first_test_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
FROM first_test_pageviews 
LEFT JOIN website_pageviews 
    ON website_pageviews.website_pageview_id = first_test_pageviews.min_pageview_id
WHERE website_pageviews.pageview_url IN ('/home', '/lander-1');

-- table to bring in orders

CREATE TEMPORARY TABLE nonbrand_test_sessions_w_orders AS
SELECT 
    nonbrand_test_sessions_w_landing_pages.website_session_id,
    nonbrand_test_sessions_w_landing_pages.landing_page,
    orders.order_id AS order_id
FROM nonbrand_test_sessions_w_landing_pages
LEFT JOIN orders 
    ON orders.website_session_id = nonbrand_test_sessions_w_landing_pages.website_session_id;

-- finde the difference between conversion rates

SELECT 
    landing_page,
    COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT order_id) AS orders,
    COUNT(DISTINCT order_id)  / COUNT(DISTINCT website_session_id) AS conv_rate
FROM nonbrand_test_sessions_w_orders
GROUP BY 1;

-- 0.0318 for /home, and 0.0406 for /lander-1


-- Finding the latest session ID associated with a pageview on '/home' for the 'gsearch' nonbrand campaign

SELECT
    MAX(website_sessions.website_session_id) AS most_recent_gsearch_nonbrand_home_pageview
FROM website_sessions
LEFT JOIN website_pageviews ON website_pageviews.website_session_id = website_sessions.website_session_id
WHERE 
    website_sessions.utm_source = 'gsearch' 
    AND website_sessions.utm_campaign = 'nonbrand'
    AND website_pageviews.pageview_url = '/home'
    AND website_sessions.created_at < '2012-11-27';
    
-- max web_session_id = 17145


-- Count of website_sessions since the test

SELECT 
    COUNT(website_session_id) AS sessions_since_test
FROM website_sessions
WHERE created_at < '2012-11-27'
    AND website_session_id > 17145
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
;

-- 22.972 web_sess since the test 
-- X .0087 incremental conversion = 202 incremental orders since 7/29
-- roughly 4 moths, so aprox 50 extra orders per month!


/*7. For the landing page test I analyzed previously, show a full conversion funnel from each of the two pages to orders, 
same time period (Jun 19 - Jul 28)
*/

/*  website_sessions table, joined with the website_pageviews table based on the session IDs. Specifically, 
it's targeting sessions that originated from a 'gsearch' source with a 'nonbrand' campaign during the date range '2012-06-19' to '2012-07-28'.
*/

SELECT
	website_sessions.website_session_id,
	website_pageviews.pageview_url,
	website_pageviews.created_at AS pageview_created_at,
	CASE WHEN pageview_url = '/home' THEN 1 ELSE 0 END AS homepage,
	CASE WHEN pageview_url = '/lander-1' THEN 1 ELSE 0 END AS custom_lander,
	CASE WHEN pageview_url = '/products' THEN 1 ELSE 0 END AS products_page,
	CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
	CASE WHEN pageview_url = '/cart' THEN 1 ELSE 0 END AS cart_page,
	CASE WHEN pageview_url = '/shipping' THEN 1 ELSE 0 END AS shipping_page,
	CASE WHEN pageview_url = '/billing' THEN 1 ELSE 0 END AS billing_page,
	CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page
FROM website_sessions
    LEFT JOIN website_pageviews 
        ON website_sessions.website_session_id = website_pageviews.website_session_id
WHERE website_sessions.utm_source = 'gsearch'
	AND website_sessions.utm_campaign = 'nonbrand'
	AND website_sessions.created_at BETWEEN '2012-06-19' AND '2012-07-28'
ORDER BY website_sessions.website_session_id,
 website_pageviews.created_at;
 
 
-- CREATE TEMPORARY TABLE 

CREATE TEMPORARY TABLE session_level_made_it_flagged
SELECT
    website_session_id,
    MAX(homepage) AS saw_homepage,
    MAX(custom_lander) AS saw_custom_lander,
    MAX(products_page) AS product_made_it,
    MAX(mrfuzzy_page) AS mrfuzzy_made_it,
    MAX(cart_page) AS cart_made_it,
    MAX(shipping_page) AS shipping_made_it,
    MAX(billing_page) AS billing_made_it,
    MAX(thankyou_page) AS thankyou_made_it
FROM(
SELECT
	website_sessions.website_session_id,
	website_pageviews.pageview_url,
	website_pageviews.created_at AS pageview_created_at,
	CASE WHEN pageview_url = '/home' THEN 1 ELSE 0 END AS homepage,
	CASE WHEN pageview_url = '/lander-1' THEN 1 ELSE 0 END AS custom_lander,
	CASE WHEN pageview_url = '/products' THEN 1 ELSE 0 END AS products_page,
	CASE WHEN pageview_url = '/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS mrfuzzy_page,
	CASE WHEN pageview_url = '/cart' THEN 1 ELSE 0 END AS cart_page,
	CASE WHEN pageview_url = '/shipping' THEN 1 ELSE 0 END AS shipping_page,
	CASE WHEN pageview_url = '/billing' THEN 1 ELSE 0 END AS billing_page,
	CASE WHEN pageview_url = '/thank-you-for-your-order' THEN 1 ELSE 0 END AS thankyou_page
FROM website_sessions
    LEFT JOIN website_pageviews 
        ON website_sessions.website_session_id = website_pageviews.website_session_id
WHERE website_sessions.utm_source = 'gsearch'
	AND website_sessions.utm_campaign = 'nonbrand'
	AND website_sessions.created_at BETWEEN '2012-06-19' AND '2012-07-28'
ORDER BY website_sessions.website_session_id,
 website_pageviews.created_at
) AS pageview_level
GROUP BY 1;


-- final output Part 1
-- Calculate the funnel from sessions to the thank you page, segmenting by landing page type

SELECT
    CASE
        WHEN saw_custom_lander = 1 THEN 'saw_custom_lander'
        WHEN saw_homepage = 1 THEN 'saw_homepage'
        ELSE 'check logic'
    END AS segment,
    COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN product_made_it = 1 THEN website_session_id ELSE NULL END) AS to_products,
    COUNT(DISTINCT CASE WHEN mrfuzzy_made_it = 1 THEN website_session_id ELSE NULL END) AS to_mrfuzzy,
    COUNT(DISTINCT CASE WHEN cart_made_it = 1 THEN website_session_id ELSE NULL END) AS to_cart,
    COUNT(DISTINCT CASE WHEN shipping_made_it = 1 THEN website_session_id ELSE NULL END) AS to_shipping,
    COUNT(DISTINCT CASE WHEN billing_made_it = 1 THEN website_session_id ELSE NULL END) AS to_billing,
    COUNT(DISTINCT CASE WHEN thankyou_made_it = 1 THEN website_session_id ELSE NULL END) AS to_thankyou
FROM session_level_made_it_flagged
GROUP BY segment;

-- saw_custom_lander	2316	1083	772	 348	231 	197	 94
-- saw_homepage	        2261    942	    684  296	200	    168	 72




-- final output Part 2
-- Calculate click rates for conversion funnel.

SELECT
    -- Segmenting users based on the landing page they saw
    CASE
        WHEN saw_homepage = 1 THEN 'saw_homepage'
        WHEN saw_custom_lander = 1 THEN 'saw_custom_lander'
        ELSE 'check logic'
    END AS segment,
    -- Calculating click rates for various funnel steps
    COUNT(DISTINCT CASE WHEN product_made_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT website_session_id) AS lander_click_rt,
    COUNT(DISTINCT CASE WHEN mrfuzzy_made_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT CASE WHEN product_made_it = 1 THEN website_session_id ELSE NULL END) AS products_click_rt,
    COUNT(DISTINCT CASE WHEN cart_made_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT CASE WHEN mrfuzzy_made_it = 1 THEN website_session_id ELSE NULL END) AS mrfuzzy_click_rt,
    COUNT(DISTINCT CASE WHEN shipping_made_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT CASE WHEN cart_made_it = 1 THEN website_session_id ELSE NULL END) AS cart_click_rt,
    COUNT(DISTINCT CASE WHEN billing_made_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT CASE WHEN shipping_made_it = 1 THEN website_session_id ELSE NULL END) AS shipping_click_rt,
    COUNT(DISTINCT CASE WHEN thankyou_made_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT CASE WHEN billing_made_it = 1 THEN website_session_id ELSE NULL END) AS billing_click_rt
FROM session_level_made_it_flagged
GROUP BY 1;

-- saw_custom_lander	0.4676	0.7128	0.4508	0.6638	0.8528	0.4772
-- saw_homepage	        0.4166	0.7261	0.4327	0.6757	0.8400	0.4286


/*8. Quantifying the impact of our billing test. Analyzeing the lift generated from the test (Sep 10 - Nov 10),
 in terms of revenue per billing page session, and then pull the number of billing page sessions for the past month to understand monthly impact.
*/

-- Derive the revenue generated per billing page session for the test period.

SELECT
    billing_version_seen,
    COUNT(DISTINCT website_session_id) AS sessions,
    SUM(price_usd)/COUNT(DISTINCT website_session_id) AS revenue_per_billing_page_seen
FROM(
    SELECT
        website_pageviews.website_session_id,
        website_pageviews.pageview_url AS billing_version_seen,
        orders.order_id,
        orders.price_usd
    FROM website_pageviews
    LEFT JOIN orders 
        ON website_pageviews.website_session_id = orders.website_session_id
    WHERE website_pageviews.created_at BETWEEN '2012-09-10' AND '2012-11-10' -- Time range as per assignment
      AND website_pageviews.pageview_url IN ('/billing', '/billing-2') -- Only billing pages
) AS billing_pageviews_and_order_data
GROUP BY 1;

-- /billing	    657	 22.826484 (revenue / billing page seen from the old version)
-- /billing-2	654	 31.339297 (revenue / billing page seen from the new version)
-- LIFT(diff): $8.51 / billing page view more 


-- Billing sess pass month

SELECT 
    COUNT(website_session_id) AS billing_sessions_past_month
FROM website_pageviews
WHERE website_pageviews.pageview_url IN ('/billing','/billing-2')
    AND created_at BETWEEN '2012-11-27' AND '2012-11-27' -- past month
    
-- 1.194 billing sessions past month
-- LIFT: $8.51 per billing session
-- VALUE OF BILLING TEST: $10.160 over the past month
